import{_ as a,o as e,c as s,d as n}from"./app.40b47211.js";const y=JSON.parse('{"title":"Chain watchers ~ Contract","description":"","frontmatter":{"title":"Chain watchers ~ Contract","layout":"doc"},"headers":[{"level":2,"title":"watch()","slug":"watch","link":"#watch","children":[]},{"level":2,"title":"watchRef()","slug":"watchref","link":"#watchref","children":[]}],"relativePath":"guide/chain-watchers/contract-watcher.md"}'),t={name:"guide/chain-watchers/contract-watcher.md"},c=n(`<h1 id="contract-watcher" tabindex="-1">Contract watcher <a class="header-anchor" href="#contract-watcher" aria-hidden="true">#</a></h1><p>You can easily track an on-chain data by calling the <code>watch</code> or <code>watchRef</code> methods of any <code>VEContract</code> instance when this one is safe to be used.</p><h2 id="watch" tabindex="-1"><code>watch()</code> <a class="header-anchor" href="#watch" aria-hidden="true">#</a></h2><p>The <code>dapp.contracts.&lt;contractName&gt;.watch(&lt;method&gt;, &lt;args&gt;, &lt;callback&gt;)</code> method allows to watch for the data returned by a <code>method</code> of the contract, with the given <code>args</code>, and to execute a <code>callback</code> with the new data each time this one changes.</p><p>Here is a simple code that allows to track the balance of an ERC20 contract user :</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { dapp } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;vuethers&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">let</span><span style="color:#C9D1D9;"> userBalance </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">$ref</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">dapp.contracts.MyToken.</span><span style="color:#D2A8FF;">watch</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;balanceOf&quot;</span><span style="color:#C9D1D9;">, [dapp.signer.address], (</span><span style="color:#FFA657;">newValue</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  userBalance </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> newValue;</span></span>
<span class="line"><span style="color:#C9D1D9;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="watchref" tabindex="-1"><code>watchRef()</code> <a class="header-anchor" href="#watchref" aria-hidden="true">#</a></h2><p>This method is still experimental and may be removed in the next versions of Vuethers, that&#39;s why at the moment, it is not documented.</p>`,8),o=[c];function l(r,p,h,i,d,u){return e(),s("div",null,o)}const D=a(t,[["render",l]]);export{y as __pageData,D as default};
