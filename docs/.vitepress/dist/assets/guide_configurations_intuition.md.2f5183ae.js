import{_ as e,o as t,c as i,d as n}from"./app.906b7b89.js";const m=JSON.parse(`{"title":"Configurations ~ Intuition","description":"","frontmatter":{"title":"Configurations ~ Intuition","layout":"doc"},"headers":[{"level":2,"title":"Tulipe' approach","slug":"tulipe-approach","link":"#tulipe-approach","children":[]}],"relativePath":"guide/configurations/intuition.md"}`),o={name:"guide/configurations/intuition.md"},a=n('<h1 id="intuition" tabindex="-1">Intuition <a class="header-anchor" href="#intuition" aria-hidden="true">#</a></h1><p>Usually a DApp requires many static informations to be able to interact with nodes, smart contracts, wallets, etc. Some of them are :</p><ul><li><strong>Contracts</strong> : Addresses, ABIs, chains, etc.</li><li><strong>Networks</strong> : chain IDs, RPCs, currencies, explorers URLs, icons URLs, etc.</li><li><strong>Wallets</strong> : names, display names, icons URLs</li></ul><p>All those informations can be difficult to organize and they often implies a lot of <code>import</code> statement in the project&#39;s files since they are often required almost everywhere in the app. <br></p><h2 id="tulipe-approach" tabindex="-1">Tulipe&#39; approach <a class="header-anchor" href="#tulipe-approach" aria-hidden="true">#</a></h2><p>Tulipe allows developers to structure all those informations in <strong>a single file</strong> called <code>tulipe.config.js</code>.</p><p>During DApp&#39;s initialization, all those informations are deeply merged with internally pre-populated informations, allowing to <strong>configure 20+ EVM chain and 5+ wallets by simply indicating their ID and names</strong> in the configurations file.</p><p>Finally, Tulipe uses all those informations to perform initialization stuffs and to setup ready-to-use interfaces available across the entire app through the <a href="/guide/dapp-object/intuition.html">the <code>dapp</code> object</a>.</p><p>This removes the requirements of multiple <code>import</code> statement and instanciations, and so <strong>reduces errors and improves maintainability</strong>.</p>',9),s=[a];function r(l,c,p,d,u,h){return t(),i("div",null,s)}const g=e(o,[["render",r]]);export{m as __pageData,g as default};
