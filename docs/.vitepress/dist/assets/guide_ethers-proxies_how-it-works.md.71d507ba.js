import{_ as s,o as e,c as o,d as t}from"./app.106af06f.js";const n="/assets/ethers-proxies.16ccee81.svg",E=JSON.parse('{"title":"Ethers proxies ~ How it works ?","description":"","frontmatter":{"title":"Ethers proxies ~ How it works ?","layout":"doc"},"headers":[],"relativePath":"guide/ethers-proxies/how-it-works.md"}'),r={name:"guide/ethers-proxies/how-it-works.md"},a=t('<h1 id="how-it-works" tabindex="-1">How it works ? <a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a></h1><p>Tulipe provides many Ethers proxies classes that all inherit of the <code>VEProxy</code> class :</p><ul><li><code>VEProviderProxy</code></li><li><code>VESignerProxy</code></li><li><code>VEContractProxy</code></li><li><code>VETransactionProxy</code></li></ul><p>Instances of those classes are simple JS proxies that are able to receive 3 distinct source objects, which sorted by order of priority are :</p><ol><li><strong>An Ethers.js instance</strong> (optional) --&gt; the original Ethers.js instance</li><li><strong>A <code>VEExtension</code> instance</strong> (optional) --&gt; used to extends the Ethers.js instance without mutating it</li><li><strong>A <code>VEPlaceholder</code> instance</strong> (optional) --&gt; used to add methods and properties related to the Ethers.js instance but that don&#39;t require it directly. Those one are available even before the Ethers.js instance is available.</li></ol><p>It means that when accessing an Ethers proxy instance, this one will search for the requested property / method into its 3 sources objects. It looks like :</p><p><img src="'+n+`" alt="ill"></p><p>As you can see on this diagram, an Ethers proxy instance will firstly search for the requested property / method in its <strong>Ethers.js instance</strong>.</p><p>If the <strong>Ethers.js instance</strong> is <code>null</code> or if the property / method is not found in it, it will search for it in its <strong><code>VEExtension</code> instance</strong>.</p><p>If the <strong><code>VEExtension</code> instance</strong> is also <code>null</code> or if the property / method is not found in it, it will search for it in its <strong><code>VEPlaceholder</code> instance</strong>.</p><p>Finally if the request property / method is not found in all those instances, it will simply return <code>undefined</code>.</p><p>Here is an in-code illustration with the <code>dapp.provider</code> Ethers proxy :</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { dapp } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;tulipe&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">dapp.provider.</span><span style="color:#D2A8FF;">getBlock</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">12345</span><span style="color:#C9D1D9;">) </span><span style="color:#8B949E;">// This property comes from the Ethers.js instance</span></span>
<span class="line"><span style="color:#C9D1D9;">dapp.provider.</span><span style="color:#D2A8FF;">watch</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">...</span><span style="color:#C9D1D9;">)      </span><span style="color:#8B949E;">// This property comes from the VEExtension instance</span></span>
<span class="line"><span style="color:#C9D1D9;">dapp.provider.isSafe          </span><span style="color:#8B949E;">// This property comes from the VEPlaceholder instance</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,13),i=[a];function l(p,c,d,h,y,u){return e(),o("div",null,i)}const g=s(r,[["render",l]]);export{E as __pageData,g as default};
