import{_ as s,o as e,c as a,d as n}from"./app.902cdb4f.js";const D=JSON.parse(`{"title":"Get started ~ Intuition","description":"","frontmatter":{"title":"Get started ~ Intuition","layout":"doc"},"headers":[{"level":2,"title":"Current context","slug":"current-context","link":"#current-context","children":[]},{"level":2,"title":"DApp requirements / problems","slug":"dapp-requirements-problems","link":"#dapp-requirements-problems","children":[]},{"level":2,"title":"Vuethers' approach","slug":"vuethers-approach","link":"#vuethers-approach","children":[{"level":3,"title":"Final words","slug":"final-words","link":"#final-words","children":[]}]},{"level":2,"title":"How does it tastes ? \u{1F60B}","slug":"how-does-it-tastes-\u{1F60B}","link":"#how-does-it-tastes-\u{1F60B}","children":[]}],"relativePath":"guide/get-started/intuition.md"}`),l={name:"guide/get-started/intuition.md"},t=n(`<h1 id="intuition" tabindex="-1">Intuition <a class="header-anchor" href="#intuition" aria-hidden="true">#</a></h1><h2 id="current-context" tabindex="-1">Current context <a class="header-anchor" href="#current-context" aria-hidden="true">#</a></h2><p>Nowadays, libraries like <a href="https://web3js.org/" target="_blank" rel="noreferrer">Web3.js</a> and <a href="https://ethers.org/" target="_blank" rel="noreferrer">Ethers.js</a> provide robust interfaces to interact with EVM blockchains from any Javascript environment.</p><p>Those libraries allow to abstract blockchain-related concepts like nodes, smart contracts, wallets, transactions, etc. as simple JS objects. Thanks to them we can already interact with blockchains from any popular web JS framework like <a href="https://reactjs.org/" target="_blank" rel="noreferrer">React</a>, <a href="https://vuejs.org/" target="_blank" rel="noreferrer">VueJS</a>, <a href="https://angular.io/" target="_blank" rel="noreferrer">Angular</a>, etc.</p><p>At writing time, React is the mainly used framework for DApps development.</p><h2 id="dapp-requirements-problems" tabindex="-1">DApp requirements / problems <a class="header-anchor" href="#dapp-requirements-problems" aria-hidden="true">#</a></h2><p>So easily requesting EVM blockchain is solved by libraries mentioned above, but a DApp has many other requirements to work properly, here are some of them :</p><ul><li>it has to detect and communicate with user&#39;s wallet</li><li>it has to track on-chain datas to display up-to-date content to users</li><li>it has to provides users with an easy way to interact with chain and contracts</li><li>it has to perform <strong>a lot</strong> of checks to ensure all those actions always remain safe</li></ul><p>However very few libraries exist to help developers to fill those requirements, and it&#39;s especially true for VueJS : <strong>there is currently no complete library to achieve that</strong>.</p><h2 id="vuethers-approach" tabindex="-1">Vuethers&#39; approach <a class="header-anchor" href="#vuethers-approach" aria-hidden="true">#</a></h2><p>Vuethers provides developers with <strong>a fully simplified environment making the development of maintainable, robust and safe DApps a real piece of cake.</strong></p><p>Firstly, the entire DApp configuration is managed in a single file called <code>vuethers.config.js</code>.</p><p>The DApp is represented by a <code>dapp</code> object. This object is initialized with everything required to safely interact with the networks, contracts and wallets defined by the developer in the <code>vuethers.config.js</code> file. By the way, Vuethers comes with 20+ EVM and 5+ wallets pre-configured allowing to use them by simply indicating their chain ID or wallet name in the <code>vuethers.config.js</code> file.</p><p>Then, all the safety checks are internally managed and developers are provided with tools called <a href="/guide/safers/intuition.html">safers</a> allowing them to write safe pieces of code by simply wrapping them in functions or components.</p><p>Also, <a href="/guide/chain-watchers/intuition.html">chain watchers</a> allows developer to efficiently track an on-chain data with a single line of code.</p><p>Finally, a lot of Vue <a href="/guide/components/intuition.html">components</a> are included in order to provide developers with pre-made and robust components for the most common parts of a DApp : <strong>allowing them to focus more on the real innovation of their DApps</strong>.</p><p>All of those components are thought to be flexible and to allows developers to choose to be more or less free :</p><ul><li>they are made of smaller components that can be used to re-build bigger custom components</li><li>3 levels of styling are offered from &quot;unstylized&quot; to &quot;opinionated&quot;, leaving the choice to developers of being more or less helped in the style of their DApp</li></ul><h3 id="final-words" tabindex="-1">Final words <a class="header-anchor" href="#final-words" aria-hidden="true">#</a></h3><p>Here are only exposed the major functionalities offered by Vuethers, there are much more in reality and you can find them in the rest of this documentation.</p><h2 id="how-does-it-tastes-\u{1F60B}" tabindex="-1">How does it tastes ? \u{1F60B} <a class="header-anchor" href="#how-does-it-tastes-\u{1F60B}" aria-hidden="true">#</a></h2><p>With Vuethers most of the DApp datas are accessible through the <code>dapp</code> object. When the DApp is initialized, this object is filled with everything the DApp needs to work.</p><p>To illustrate how Vuethers taste, let&#39;s imagine a simple ERC20 contract called MyToken.</p><p>Here is how it feels with Vuethers :</p><ul><li>if we want to interact with our <code>MyToken</code> contract :</li></ul><div class="language-html line-numbers-mode"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">setup</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { dapp } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;vuethers&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">userAddress</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;0xf39Fd6e5...&quot;</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">userBalance</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> dapp.contracts.MyToken.</span><span style="color:#D2A8FF;">balanceOf</span><span style="color:#C9D1D9;">(userAddress)</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Explanations</p><p>Our <code>MyToken</code> contract is directly available in the <code>dapp</code> object at <code>dapp.contracts.MyToken</code>. It is a simple Ethers.js contract object with few additional methods.</p></div><ul><li>if we want to ensure our interaction with MyToken contract is safe in script :</li></ul><div class="language-html line-numbers-mode"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">setup</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { dapp } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;vuethers&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">userAddress</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;0xf39Fd6e5...&quot;</span></span>
<span class="line"><span style="color:#FF7B72;">let</span><span style="color:#C9D1D9;"> userBalance </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">$ref</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">dapp.contracts.MyToken.</span><span style="color:#D2A8FF;">onReadSafe</span><span style="color:#C9D1D9;">(() </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// Will be executed only when MyToken contract will be safe to read</span></span>
<span class="line"><span style="color:#C9D1D9;">  userBalance </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> dapp.contracts.MyToken.</span><span style="color:#D2A8FF;">balanceOf</span><span style="color:#C9D1D9;">(userAddress)</span></span>
<span class="line"><span style="color:#C9D1D9;">})</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Explanations</p><p>By wrapping our code in the <code>dapp.contracts.MyToken.onReadSafe()</code>method, we ensure that it will be executed only when the <code>MyToken</code> contract is safe to be read.</p></div><ul><li>if we want to ensure our interaction with MyToken contract is safe in template :</li></ul><div class="language-html line-numbers-mode"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;</span><span style="color:#FFA198;">dapp.contracts.MyToken.OnReadSafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!-- Will be rendered only when MyToken contract will be safe to read --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;Address : {{ userAddress }}&lt;/</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;Balance : {{ userBalance }}&lt;/</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;/</span><span style="color:#FFA198;">dapp.contracts.MyToken.OnReadSafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Explanations</p><p>By wrapping our content in the <code>dapp.contracts.MyToken.OnReadSafe</code>component, we ensure that it will be rendered only when the <code>MyToken</code> contract is safe to be read.</p></div><ul><li>if we want to watch (track) an on-chain data</li></ul><div class="language-html line-numbers-mode"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">setup</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { dapp } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;vuethers&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">userAddress</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;0xf39Fd6e5...&quot;</span></span>
<span class="line"><span style="color:#FF7B72;">let</span><span style="color:#C9D1D9;"> userBalance </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">$ref</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">dapp.contracts.MyToken.</span><span style="color:#D2A8FF;">watch</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;balanceOf&quot;</span><span style="color:#C9D1D9;">, [userAddress], (</span><span style="color:#FFA657;">newValue</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// Will be executed each time &#39;balanceOf&#39; of &#39;userAddress&#39; changes</span></span>
<span class="line"><span style="color:#C9D1D9;">  userBalance </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> newValue;</span></span>
<span class="line"><span style="color:#C9D1D9;">})</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">Explanations</p><p>The <code>dapp.contracts.MyToken.watch()</code> method allows to efficiently watch for mutations of an on-chain data and to run a given callback each time it occurs. In this case it allows us to keep an up to date user&#39;s balance.</p></div><p>Vuethers offers a lot more of syntactic sugar to make DApp developers&#39; life easier, you&#39;ll be able to learn about each them in that documentation.</p>`,37),o=[t];function p(r,c,i,d,u,h){return e(),a("div",null,o)}const b=s(l,[["render",p]]);export{D as __pageData,b as default};
