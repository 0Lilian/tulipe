import{_ as s,o as a,c as n,d as e}from"./app.a0687218.js";const m=JSON.parse('{"title":"Safers ~ Contract","description":"","frontmatter":{"title":"Safers ~ Contract","layout":"doc"},"headers":[{"level":2,"title":"In scripts","slug":"in-scripts","link":"#in-scripts","children":[{"level":3,"title":"Read","slug":"read","link":"#read","children":[]},{"level":3,"title":"Write","slug":"write","link":"#write","children":[]}]},{"level":2,"title":"In templates","slug":"in-templates","link":"#in-templates","children":[{"level":3,"title":"Read","slug":"read-1","link":"#read-1","children":[]},{"level":3,"title":"Write","slug":"write-1","link":"#write-1","children":[]}]}],"relativePath":"guide/safers/contract-safety.md"}'),p={name:"guide/safers/contract-safety.md"},l=e(`<h1 id="contract-safety" tabindex="-1">Contract safety <a class="header-anchor" href="#contract-safety" aria-hidden="true">#</a></h1><p>In cases ...</p><ul><li>your DApp is not initialized yet</li><li>or if it is neither connected to any wallet nor to any network</li><li>or if the connected wallet or network is not in the ones you&#39;ve configured</li></ul><p>... using the <code>dapp.contracts.&lt;contractName&gt;</code> instance is considered unsafe since it is simply unavailable or can lead to errors and/or unexpected behaviors.</p><p>So Tulipe provides developers with many safers that allows you to easily write safe code when your are using a <code>dapp.contracts.&lt;contractName&gt;</code> object, here are them.</p><h2 id="in-scripts" tabindex="-1">In scripts <a class="header-anchor" href="#in-scripts" aria-hidden="true">#</a></h2><h3 id="read" tabindex="-1">Read <a class="header-anchor" href="#read" aria-hidden="true">#</a></h3><p>To make a piece of code that is safe when using a read method of a contract (a method that doesn&#39;t mutate any on-chain data), you can use the <code>onReadSafe()</code> method of the <code>dapp.contracts.&lt;contractName&gt;</code> object :</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { dapp } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;tulipe&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">dapp.contracts.MyContract.</span><span style="color:#D2A8FF;">onReadSafe</span><span style="color:#C9D1D9;">(() </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// Code here will be executed only when the dapp.contracts.MyContract is safe to read.</span></span>
<span class="line"><span style="color:#C9D1D9;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>And if at some point in your code you have to test if the <code>dapp.contracts.&lt;contractName&gt;</code> object is safe to be read, you can use the <code>isReadSafe</code> computed property of the <code>dapp.contracts.&lt;contractName&gt;</code> object :</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { dapp } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;tulipe&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (dapp.contracts.MyContract.isReadSafe.value) {</span></span>
<span class="line"><span style="color:#C9D1D9;">  console.</span><span style="color:#D2A8FF;">log</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;The DApp contract is read safe !&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="write" tabindex="-1">Write <a class="header-anchor" href="#write" aria-hidden="true">#</a></h3><p>To make a piece of code that is safe when using a write method of a contract (a method that doesn&#39;t mutate any on-chain data), you can use the <code>onWriteSafe()</code> method of the <code>dapp.contracts.&lt;contractName&gt;</code> object :</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { dapp } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;tulipe&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">dapp.contracts.MyContract.</span><span style="color:#D2A8FF;">onWriteSafe</span><span style="color:#C9D1D9;">(() </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// Code here will be executed only when the dapp.contracts.MyContract is safe to write.</span></span>
<span class="line"><span style="color:#C9D1D9;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>And if at some point in your code you have to test if the <code>dapp.contracts.&lt;contractName&gt;</code> object is safe to be write, you can use the <code>isWriteSafe</code> computed property of the <code>dapp.contracts.&lt;contractName&gt;</code> object :</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { dapp } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;tulipe&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (dapp.contracts.MyContract.isWriteSafe.value) {</span></span>
<span class="line"><span style="color:#C9D1D9;">  console.</span><span style="color:#D2A8FF;">log</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;The DApp contract is write safe !&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="in-templates" tabindex="-1">In templates <a class="header-anchor" href="#in-templates" aria-hidden="true">#</a></h2><h3 id="read-1" tabindex="-1">Read <a class="header-anchor" href="#read-1" aria-hidden="true">#</a></h3><p>To make a part of a template safe when using a read method of <code>dapp.contracts.&lt;contractName&gt;</code>, you can wrap it in the <code>OnReadSafe</code> component of the <code>dapp.contracts.&lt;contractName&gt;</code> object :</p><div class="language-html line-numbers-mode"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;</span><span style="color:#FFA198;">dapp.contracts.MyContract.OnReadSafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;If I&#39;m rendered is that the DApp contract is safe to read&lt;/</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;/</span><span style="color:#FFA198;">dapp.contracts.MyContract.OnReadSafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>And if you want to define a content to render when the DApp contract is unsafe to be read and a content to render when the DApp contract is safe to be read you can use the <code>#safe</code> and <code>#unsafe</code> slots of the component :</p><div class="language-html line-numbers-mode"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;</span><span style="color:#FFA198;">dapp.contracts.MyContract.OnReadSafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">#safe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;If I&#39;m rendered is that the DApp contract is safe to read&lt;/</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">#unsafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;If I&#39;m rendered is that the DApp contract is NOT safe to read&lt;/</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;/</span><span style="color:#FFA198;">dapp.contracts.MyContract.OnReadSafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="write-1" tabindex="-1">Write <a class="header-anchor" href="#write-1" aria-hidden="true">#</a></h3><p>To make a part of a template safe when using a write method of <code>dapp.contracts.&lt;contractName&gt;</code>, you can wrap it in the <code>OnWriteSafe</code> component of the <code>dapp.contracts.&lt;contractName&gt;</code> object :</p><div class="language-html line-numbers-mode"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;</span><span style="color:#FFA198;">dapp.contracts.MyContract.OnWriteSafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;If I&#39;m rendered is that the DApp contract is safe to write&lt;/</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;/</span><span style="color:#FFA198;">dapp.contracts.MyContract.OnWriteSafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>And if you want to define a content to render when the DApp contract is unsafe to be write and a content to render when the DApp contract is safe to be write you can use the <code>#safe</code> and <code>#unsafe</code> slots of the component :</p><div class="language-html line-numbers-mode"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;</span><span style="color:#FFA198;">dapp.contracts.MyContract.OnWriteSafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">#safe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;If I&#39;m rendered is that the DApp contract is safe to write&lt;/</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">#unsafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;If I&#39;m rendered is that the DApp contract is NOT safe to write&lt;/</span><span style="color:#7EE787;">p</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;/</span><span style="color:#FFA198;">dapp.contracts.MyContract.OnWriteSafe</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,27),t=[l];function o(c,r,i,d,D,y){return a(),n("div",null,t)}const b=s(p,[["render",o]]);export{m as __pageData,b as default};
